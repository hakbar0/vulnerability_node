import { Test, TestingModule } from '@nestjs/testing';
import { HttpModule } from '@nestjs/common';
import { AuthController } from './auth.controller';
import { AuthService } from '../services/auth.service';
import { BadRequestException } from '@nestjs/common/exceptions';

describe('AuthController', () => {
  let controller: AuthController;
  let authService: AuthService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [HttpModule],
      controllers: [AuthController],
      providers: [AuthService],
    }).compile();

    controller = module.get<AuthController>(AuthController);
    authService = module.get<AuthService>(AuthService);
  });

  describe('generateToken', () => {
    it('should generate a token successfully', async () => {
      const token = 'SAMPLE_TOKEN';
      jest.spyOn(authService, 'generateToken').mockResolvedValue({ token });

      const result = await controller.generateToken();

      expect(result).toEqual({ token });
      expect(authService.generateToken).toHaveBeenCalledWith(
        process.env.cytix_username,
        process.env.cytix_password,
      );
    });

    it('should throw BadRequestException if token generation fails', async () => {
      const errorMessage = 'Token generation failed';
      jest
        .spyOn(authService, 'generateToken')
        .mockRejectedValue(new Error(errorMessage));

      await expect(controller.generateToken()).rejects.toThrow(
        BadRequestException,
      );
      expect(authService.generateToken).toHaveBeenCalledWith(
        process.env.cytix_username,
        process.env.cytix_password,
      );
    });
  });
});
