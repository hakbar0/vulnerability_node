import { Test, TestingModule } from '@nestjs/testing';
import { ScanController } from './scan.controller';
import { ScanService } from '../services/scan.service';
import { BadRequestException } from '@nestjs/common/exceptions';
import { Vulnerability } from '../interface/vulnerability.interface';
import { HttpModule } from '@nestjs/common';

describe('ScanController', () => {
  let controller: ScanController;
  let scanService: ScanService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [HttpModule],
      controllers: [ScanController],
      providers: [ScanService],
    }).compile();

    controller = module.get<ScanController>(ScanController);
    scanService = module.get<ScanService>(ScanService);
  });

  describe('scan', () => {
    it('should call scanService.scan with authorization header', async () => {
      const authorization = 'Bearer token';
      const scanResult = { id: 'scanId' };

      jest.spyOn(scanService, 'scan').mockResolvedValue(scanResult);

      const result = await controller.scan(authorization);

      expect(result).toEqual(scanResult);
      expect(scanService.scan).toHaveBeenCalledWith(authorization);
    });

    it('should throw BadRequestException when scanService.scan throws an error', async () => {
      const authorization = 'Bearer token';
      const errorMessage = 'Scan error';

      jest
        .spyOn(scanService, 'scan')
        .mockRejectedValue(new Error(errorMessage));

      await expect(controller.scan(authorization)).rejects.toThrow(
        BadRequestException,
      );
      expect(scanService.scan).toHaveBeenCalledWith(authorization);
    });
  });

  describe('getScanById', () => {
    it('should call scanService.getScanById with id and authorization header', async () => {
      const id = 'scanId';
      const authorization = 'Bearer token';
      const scanResult: Vulnerability[] = [
        {
          id: '1',
          title: 'Vulnerability 1',
          description: 'Description 1',
          severity: 'Low',
          url: 'https://example.com',
          date: '2022-01-01T00:00:00Z',
        },
      ];

      jest.spyOn(scanService, 'getScanById').mockResolvedValue(scanResult);

      const result = await controller.getScanById(id, authorization);

      expect(result).toEqual(scanResult);
      expect(scanService.getScanById).toHaveBeenCalledWith(id, authorization);
    });

    it('should throw BadRequestException when scanService.getScanById throws an error', async () => {
      const id = 'scanId';
      const authorization = 'Bearer token';
      const errorMessage = 'Scan error';

      jest
        .spyOn(scanService, 'getScanById')
        .mockRejectedValue(new Error(errorMessage));

      await expect(controller.getScanById(id, authorization)).rejects.toThrow(
        BadRequestException,
      );
      expect(scanService.getScanById).toHaveBeenCalledWith(id, authorization);
    });
  });
});
